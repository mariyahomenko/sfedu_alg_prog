# Побитовые операции в Python

# Побитовое НЕ (инверсия) ~
# ~x = -(x + 1)
# Работает как инверсия всех битов числа
# 16 в двоичном виде: 00010000
# Инверсия: 11101111 (это -17)
print(f"16: {bin(16)}")      # 0b10000
print(f"~16: {bin(~16)}")    # -0b10001 (-17)

# Побитовая конъюнкция (И) &
# 10001    (17)
# & 101    (5)
# -----
# 00001    (1)
x, y = 17, 5
print(f'{x} & {y} = {x & y}')  # 17 & 5 = 1
# Проверка чётности - выяснить, последний символ у нас 1 (нечетное) или 0 (четное)
def is_even(n):
    return (n & 1) == 0
print(is_even(10))  # True
print(is_even(7))   # False

# Побитовая дизъюнкция (ИЛИ) |
#  10001    (17)
# |  101    (5)
# ------
#  10101    (21)
x, y = 17, 5
print(f'{x} | {y} = {x | y}')  # 17 | 5 = 21
# Установка битов
def set_bit(n, position):
    return n | (1 << position)
print(set_bit(5, 1))  # 5 (101) → 7 (111)

# Побитовая строгая дизъюнкция / Исключающее ИЛИ (XOR) ^
#  10001    (17)
# ^00101    (5)
# ------
#  10100    (20)
x, y = 17, 5
print(f'{x} ^ {y} = {x ^ y}')  # 17 ^ 5 = 20
# Обмен значений без временной переменной
a, b = 5, 10
a = a ^ b 
b = a ^ b  # (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a
a = a ^ b  # (a ^ b) ^ a = b ^ (a ^ a) = b ^ 0 = b
print(f"a = {a}, b = {b}")  # a = 10, b = 5

# Побитовый сдвиг вправо >>
# Целочисленное деление на степень двойки
# 10 = 1010₂
# 1010|
#  101|0  → 101₂ = 5
x, y = 10, 1
print(f'{x} >> {y} = {x >> y}')  # 10 >> 1 = 5
# x >> n = x // (2**n)
print(10 >> 1)  # 10 // 2 = 5
print(10 >> 2)  # 10 // 4 = 2
print(10 >> 3)  # 10 // 8 = 1

# Побитовый сдвиг влево <<
# Умножение на степень двойки
# 10 = 1010₂
#  1010|000..0
# 10100|00..0  → 10100₂ = 20
x, y = 10, 1
print(f'{x} << {y} = {x << y}')  # 10 << 1 = 20
# x << n = x * (2**n)
print(10 << 1)  # 10 * 2 = 20
print(10 << 2)  # 10 * 4 = 40  
print(10 << 3)  # 10 * 8 = 80

# Побитовые операции имеют НИЗКИЙ приоритет
result = 10 & 5 + 1    # = 10 & (5 + 1) = 10 & 6 = 2
result = (10 & 5) + 1  # = 0 + 1 = 1

# ~ - инверсия битов: ~x = -(x + 1)
# & - побитовое И: бит = 1 только если оба бита = 1
# | - побитовое ИЛИ: бит = 1 если хотя бы один бит = 1
# ^ - исключающее ИЛИ: бит = 1 если биты разные
# << - сдвиг влево: умножение на 2ⁿ
# >> - сдвиг вправо: целочисленное деление на 2ⁿ
